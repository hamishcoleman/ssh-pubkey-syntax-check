#!/usr/bin/env perl
use warnings;
use strict;
#
# Read as input a given known hosts file.
#
# Generate errors for any lines that have syntax errors
#

use MIME::Base64;

my $config = {
    check_duplicate_hostnames => 1,
    check_duplicate_keys      => 0,
    errorcount_max            => 15,
};

my $db = {};

# By default, we have no errors
$db->{errors}{exitcode} = 0;

sub populate_ssh_keytypes {
    my @list = `ssh -Q key 2>/dev/null`;

    if (!scalar(@list)) {
        # if the ssh is too old to support this query, use a hardcoded list
        @list = qw(
            ssh-dss
            ssh-rsa
            ecdsa-sha2-nistp256
        );
    }

    for my $i (@list) {
        chomp $i;
        $db->{ssh}{query}{key}{$i} ++;
    }
}

sub current_line {
    return join('',$ARGV,':',$.);
}

# Report an error in the current line to the user.
# If we get too many errors, abort the run.
#
sub error {
    my $error_new = shift;

    # TODO - make the new value the 'worst' of the two
    $db->{errors}{exitcode} = $error_new;

    my $message = join('',current_line(),' ',@_);
    push @{$db->{errors}{log}},$message;
    print($message,"\n");

    $db->{errors}{count}++;
    if ($db->{errors}{count}>$config->{errorcount_max}) {
        warn("Too many errors, aborting any remaining checks\n");
        exit $db->{errors}{exitcode};
    }
}

# Decode one chunk of the binary key
#
sub get_val_remain {
    my ($binary) = @_;

    if (length($binary)<4) {
        # not even room for the length field
        return undef;
    }

    my ($len) = unpack('N',$binary);
    my ($val) = unpack('N/a',$binary);

    if ($len>length($val)) {
        # this length value ran us off the end of the binary
        return undef;
    }

    return ($val,substr($binary,$len+4));
}

sub check_encoded_key {
    my ($type,$encoded) = @_;

    # we are passed a base64 encoded array of len,val pairs (len is
    # u32 value)

    # TODO
    # - use a better base64 function that actually reports errors
    # - if the len pointer is ever beyond the remaining length then we fail
    # - pair 1 looks like the same as the string type

    # for ecdsa-sha2-nistp256
    # - pair 2 is a second string value
    # - pair 3 is binary

    # for ssh-rsa
    # - pair 2 is "01 00 01"
    # - pair 3 is binary of length 0101
    # - pair 4 is ?
    # - pair 5 is ?
    # - pair 6 is ?

    if (!defined($encoded)) {
        error(1,"Base64 key missing");
        return undef;
    }

    my $binary = decode_base64($encoded);
    if (!defined($binary)) {
        error(1,"Base64 key decode error");
        return undef;
    }

    if (!length($binary)) {
        error(1,"key length error");
        return undef;
    }

    my $val;
    my @fields;
    while (length($binary)) {
        ($val,$binary) = get_val_remain($binary);
        if (!defined($val)) {
            error(1,"key structure length/val error");
            return undef;
        }
        push @fields,$val;
    }

    if ($type ne $fields[0]) {
        error(1,"Key type does not match encoded key");
        return undef;
    }

    # The key type can also be checked against a list of known good types
    # earlier in the process - so we dont need to double-check that here.
        
    # TODO - check other fields against correct values?

    # TODO - check number of fields found
    # - escda == 3?
    # - ssh-rsa == 6?

    return 1;
}

sub check_key_type {
    my ($key_type) = @_;

    if (!$db->{ssh}{query}{key}{$key_type}) {
        error(1,"Unknown key type");
        return undef;
    }
    return 1;
}


# As the line checker finds hostnames, it calls this function to let it know
# that it has discovered a new hostname
#
sub discover_hostnames {
    my $current_line = shift;
    my $hostname = shift;
    my $key_type = shift;
    my @hostnames = @_;

    if (!$config->{check_duplicate_hostnames}) {
        # nothing to be done
        return 1;
    }

#  It is permissible (but not recommended) to have several lines or
#  different host keys for the same names.  This will inevitably happen
#  when short forms of host names from different domains are put in the
#  file.  It is possible that the files contain conflicting information;
#  authentication is accepted if valid information can be found from
#  either file.

    my $return=1;
    for my $host (@hostnames) {
        # give an error if we have already seen this host/type combo
        if (defined($db->{hostname}{$key_type}{$host})) {
            error(1,
                "Duplicate Hostname: ",$host," ",$key_type," ",
                "(First seen at ",$db->{hostname}{$key_type}{$host},")"
            );
            $return=undef;
        }

        # note that we have seen this host/type combo
        $db->{hostname}{$key_type}{$host}=$current_line;
    }
    return $return;
}

# As the line checker finds keys, it calls this function to let it know
# that it has discovered a new key
#
sub discover_key {
    my $current_line = shift;
    my $hostname = shift;
    my $key_type = shift;
    my $key = shift;

    if (!$config->{check_duplicate_keys}) {
        # nothing to be done
        return 1;
    }

    # give an error if we have already seen this key
    if (defined($db->{key}{$key})) {
        error(1,
            "Duplicate ",$key_type," Key in ",$hostname,
            " (First seen at ",$db->{key}{$key},")"
        );
        return undef;
    }

    # note that we have seen this host/type combo
    $db->{key}{$key}=$current_line.':'.$hostname;

    return 1;
}


sub check_known_host_line {
    my ($line) = @_;

# from sshd(8):
#  Each line in these files contains the following fields: markers
#  (optional), host-names, bits, exponent, modulus, comment.  The fields
#  are separated by spaces.
#
# This is partially inaccurate: markers,host-names,type,encoded,comment is the
# observed format

    my @f = split(/ /,$line);

#  The marker is optional, but if it is present then it must be one of
#  "@cert-authority", to indicate that the line contains a certification
#  authority (CA) key, or "@revoked", to indicate that the key contained
#  on the line is revoked and must not ever be accepted.  Only one marker
#  should be used on a key line.

    if ($f[0] =~ m/^@/) {
        # this is a marker field
        # TODO - should we confirm that it is one of the two allowed values?
        shift @f;
    }

#  The optional comment field continues to the end of the line, and is
#  not used.
# TODO - optionally look at the comment (and perhaps complain)

    # We now know that there is no marker, so check for enough fields
    if (scalar(@f)<3) {
        error(1,"Too few fields");

        # Without enough fields, we cannot really continue checking
        return undef;
    }

    # we use the first hostname on the line to reference this in messages
    my $hostname;

    my $key_type = $f[1];

#  Hashed hostnames start with a "|" character.  Only one hashed hostname
#  may appear on a single line and none of the above negation or wildcard
#  operators may be applied.

    if ($f[0] =~ m/^\|/) {
        # this is a hashed hostname
        $hostname = $f[0];

        if ($f[0] =~ m/[*?!,]/) {
            error(1,"Invalid operators in hashed hostname");
        }

        # TODO - could check the fields internal to the hashed value

        discover_hostnames(current_line(),$hostname,$key_type,$f[0]);
    } else {
        my @hosts = split(/,/,$f[0]);
        $hostname = $hosts[0];

#  A hostname or address may optionally be enclosed within "[" and "]"
#  brackets then followed by ":" and a non-standard port number.

        for my $host (@hosts) {
            if ($host =~ m/\[/) {
                # if there is a square bracket anywhere in the hostname,
                # it must conform to the whole pattern
                
                if ($host !~ /^\[[^]]+]:\d+/) {
                    error(1,"Invalid non-standard port number");
                }
            }
        }

        discover_hostnames(current_line(),$hostname,$key_type,@hosts);
    }


    if (!check_key_type($key_type)) {
        return undef;
    }
    if (!check_encoded_key($key_type,$f[2])) {
        return undef;
    }
    discover_key(current_line(),$hostname,$key_type,$f[2]);

    return 1;
}

populate_ssh_keytypes();

while(<>) {
    chomp;

# Lines starting with "#" and empty lines are ignored as comments.
    next if( m/^#/ );
    next if( m/^$/ );

    check_known_host_line($_);

} continue {
    # Ensure that the $. value is correct across multiple input files
    close ARGV if eof;
}

exit $db->{errors}{exitcode};
